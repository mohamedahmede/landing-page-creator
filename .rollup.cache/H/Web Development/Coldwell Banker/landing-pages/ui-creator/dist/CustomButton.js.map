{"version":3,"file":"CustomButton.js","sourceRoot":"","sources":["../src/components/CustomButton.tsx"],"names":[],"mappings":";;AACA,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,oBAAoB,CAAC;AA6B5B,MAAM,YAAY,GAA0B,CAAC,EAW5C,EAAE,EAAE;QAXwC,EAC5C,OAAO,GAAG,OAAO,EACjB,IAAI,GAAG,IAAI,EACX,KAAK,GAAG,SAAS,EACjB,QAAQ,EACR,SAAS,EACT,IAAI,EACJ,GAAG,EACH,OAAO,EACP,KAAK,OAEL,EADG,KAAK,cAVoC,wFAW5C,CADQ;IAER,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IAEhD,MAAM,aAAa,GAAG,CACrB,+CACe,OAAO,eACV,IAAI,gBACH,KAAK,EACjB,SAAS,EAAE,aAAa,EACxB,OAAO,EAAE,OAAO,IACZ,KAAK,cAER,IAAI,IACG,CACT,CAAC;IAEF,IAAI,QAAQ,EAAE,CAAC;QACd,OAAO,GAAG,CAAC,CAAC,CAAC,CACZ,YAAG,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,YACpE,IAAI,GACF,CACJ,CAAC,CAAC,CAAC,CACH,+BAAQ,SAAS,EAAE,SAAS,IAAM,KAAK,cACrC,IAAI,IACG,CACT,CAAC;IACH,CAAC;IAED,qEAAqE;IACrE,IAAI,GAAG,EAAE,CAAC;QACT,OAAO,CACN,YACC,IAAI,EAAE,GAAG,EACT,KAAK,EAAE,EAAE,cAAc,EAAE,MAAM,EAAE,OAAO,EAAE,cAAc,EAAE,EAC1D,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,YAEjC,aAAa,GACX,CACJ,CAAC;IACH,CAAC;IAED,uCAAuC;IACvC,OAAO,aAAa,CAAC;AACtB,CAAC,CAAC;AAEF,eAAe,YAAY,CAAC","sourcesContent":["import React, { ButtonHTMLAttributes } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport \"./CustomButton.css\";\r\n\r\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\r\n\tvariant?: Variant;\r\n\tsize?: Size;\r\n\tshape?: Shape;\r\n\t/** If true, skip all default styles and only use className (escape hatch) */\r\n\tunstyled?: boolean;\r\n\tclassName?: string;\r\n\ttext?: string;\r\n\turl?: string;\r\n\tblank?: boolean;\r\n\tonClick?: () => void;\r\n}\r\n\r\ntype Variant =\r\n\t| \"black\"\r\n\t| \"white\"\r\n\t| \"red\"\r\n\t| \"gray\"\r\n\t| \"lime\"\r\n\t| \"transparent-black\"\r\n\t| \"transparent-white\"\r\n\t| \"transparent-red\"\r\n\t| \"transparent-gray\"\r\n\t| \"transparent-lime\";\r\ntype Size = \"sm\" | \"md\" | \"lg\";\r\ntype Shape = \"rounded\" | \"square\";\r\n\r\nconst CustomButton: React.FC<ButtonProps> = ({\r\n\tvariant = \"black\",\r\n\tsize = \"md\",\r\n\tshape = \"rounded\",\r\n\tunstyled,\r\n\tclassName,\r\n\ttext,\r\n\turl,\r\n\tonClick,\r\n\tblank,\r\n\t...props\r\n}) => {\r\n\tconst buttonClasses = clsx(\"ma-btn\", className);\r\n\r\n\tconst buttonElement = (\r\n\t\t<button\r\n\t\t\tdata-variant={variant}\r\n\t\t\tdata-size={size}\r\n\t\t\tdata-shape={shape}\r\n\t\t\tclassName={buttonClasses}\r\n\t\t\tonClick={onClick}\r\n\t\t\t{...props}\r\n\t\t>\r\n\t\t\t{text}\r\n\t\t</button>\r\n\t);\r\n\r\n\tif (unstyled) {\r\n\t\treturn url ? (\r\n\t\t\t<a href={url} className={className} target={blank ? \"_blank\" : \"_self\"}>\r\n\t\t\t\t{text}\r\n\t\t\t</a>\r\n\t\t) : (\r\n\t\t\t<button className={className} {...props}>\r\n\t\t\t\t{text}\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n\r\n\t// If URL is provided, wrap in anchor tag for universal compatibility\r\n\tif (url) {\r\n\t\treturn (\r\n\t\t\t<a\r\n\t\t\t\thref={url}\r\n\t\t\t\tstyle={{ textDecoration: \"none\", display: \"inline-block\" }}\r\n\t\t\t\ttarget={blank ? \"_blank\" : \"_self\"}\r\n\t\t\t>\r\n\t\t\t\t{buttonElement}\r\n\t\t\t</a>\r\n\t\t);\r\n\t}\r\n\r\n\t// Otherwise render as a regular button\r\n\treturn buttonElement;\r\n};\r\n\r\nexport default CustomButton;\r\n"]}